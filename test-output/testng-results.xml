<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="3" passed="3" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-07-05T13:00:06 IST" name="Suite" finished-at="2023-07-05T13:00:11 IST" duration-ms="5429">
    <groups>
      <group name="regression">
        <method signature="Practice.m2()[pri:0, instance:script.Practice@78123e82]" name="m2" class="script.Practice"/>
      </group> <!-- regression -->
      <group name="sainity">
        <method signature="Practice.m1()[pri:0, instance:script.Practice@78123e82]" name="m1" class="script.Practice"/>
      </group> <!-- sainity -->
    </groups>
    <test started-at="2023-07-05T13:00:06 IST" name="A" finished-at="2023-07-05T13:00:11 IST" duration-ms="5429">
      <class name="script.Practice">
        <test-method is-config="true" signature="suiteConfig()[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:06 IST" name="suiteConfig" finished-at="2023-07-05T13:00:06 IST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- suiteConfig -->
        <test-method is-config="true" signature="testConfig()[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:06 IST" name="testConfig" finished-at="2023-07-05T13:00:06 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConfig -->
        <test-method is-config="true" signature="classConfig(java.lang.String)[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:06 IST" name="classConfig" finished-at="2023-07-05T13:00:11 IST" duration-ms="5198" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[chrome]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- classConfig -->
        <test-method is-config="true" signature="tearDownConfig()[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:11 IST" name="tearDownConfig" finished-at="2023-07-05T13:00:11 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownConfig -->
        <test-method signature="m()[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:11 IST" name="m" finished-at="2023-07-05T13:00:11 IST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- m -->
        <test-method is-config="true" signature="tearDownMethod()[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:11 IST" name="tearDownMethod" finished-at="2023-07-05T13:00:11 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownMethod -->
        <test-method is-config="true" signature="tearDownConfig()[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:11 IST" name="tearDownConfig" finished-at="2023-07-05T13:00:11 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownConfig -->
        <test-method signature="m1()[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:11 IST" name="m1" finished-at="2023-07-05T13:00:11 IST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- m1 -->
        <test-method is-config="true" signature="tearDownMethod()[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:11 IST" name="tearDownMethod" finished-at="2023-07-05T13:00:11 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownMethod -->
        <test-method signature="m2()[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:11 IST" name="m2" finished-at="2023-07-05T13:00:11 IST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- m2 -->
        <test-method is-config="true" signature="tearDownConfig()[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:11 IST" name="tearDownConfig" finished-at="2023-07-05T13:00:11 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownConfig -->
        <test-method is-config="true" signature="tearDownMethod()[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:11 IST" name="tearDownMethod" finished-at="2023-07-05T13:00:11 IST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownMethod -->
        <test-method is-config="true" signature="classTearDown()[pri:0, instance:script.Practice@78123e82]" started-at="2023-07-05T13:00:11 IST" name="classTearDown" finished-at="2023-07-05T13:00:11 IST" duration-ms="168" status="FAIL">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
at genericLibrary.ExcelLibrary.closeExcel(ExcelLibrary.java:61)
at genericLibrary.BaseClass.classTearDown(BaseClass.java:56)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.MethodInvocationHelper.invokeMethodConsideringTimeout(MethodInvocationHelper.java:62)
at org.testng.internal.ConfigInvoker.invokeConfigurationMethod(ConfigInvoker.java:385)
at org.testng.internal.ConfigInvoker.invokeConfigurations(ConfigInvoker.java:321)
at org.testng.internal.TestMethodWorker.invokeAfterClassMethods(TestMethodWorker.java:217)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:130)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1541)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- classTearDown -->
      </class> <!-- script.Practice -->
    </test> <!-- A -->
  </suite> <!-- Suite -->
</testng-results>
